Index: src/main/java/org/jis/generator/Generator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright 2007 - 2009 Johannes Geppert \n * \n * Licensed under the GPL, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License.\n * \n * You may obtain a copy of the License at\n * http://www.fsf.org/licensing/licenses/gpl.txt \n * \n * Unless required by applicable law or agreed to in writing, \n * software distributed under the License is distributed on \n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the \n * specific language governing permissions and limitations under the License.\n */\npackage org.jis.generator;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Locale;\nimport java.util.Vector;\nimport java.util.zip.Deflater;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport javax.imageio.IIOImage;\nimport javax.imageio.ImageIO;\nimport javax.imageio.ImageReadParam;\nimport javax.imageio.ImageReader;\nimport javax.imageio.ImageTypeSpecifier;\nimport javax.imageio.ImageWriteParam;\nimport javax.imageio.ImageWriter;\nimport javax.imageio.metadata.IIOMetadata;\nimport javax.imageio.metadata.IIOMetadataController;\nimport javax.imageio.plugins.jpeg.JPEGImageWriteParam;\nimport javax.imageio.stream.ImageInputStream;\nimport javax.imageio.stream.ImageOutputStream;\nimport javax.imageio.stream.MemoryCacheImageOutputStream;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.filechooser.FileFilter;\nimport javax.swing.filechooser.FileSystemView;\n\nimport org.jis.Main;\nimport org.jis.options.Options;\n\n//import com.sun.image.codec.jpeg.ImageFormatException;\n\n/**\n * @author <a href=\"http://www.jgeppert.com\">Johannes Geppert</a>\n * \n *         <p>\n *         This class do the main work and resize the images.\n *         </p>\n */\npublic class Generator {\n  public final static double ROTATE_90  = Math.toRadians(90);\n  public final static double ROTATE_270 = Math.toRadians(270);\n\n  private Main               m;\n  private Options            o;\n  private File               zipFile    = null;\n  private Vector<File>       zipIt;\n  private boolean            zippen     = false;\n  private float              quality;\n\n  /**\n   * @param m\n   *          a reference to the Main Class.\n   */\n  public Generator(Main m, float quality) {\n    super();\n    this.m = m;\n    this.o = Options.getInstance();\n    this.quality = quality;\n  }\n\n  /**\n   * @param zipFileName\n   *          File, the Name of the new ZIP-File\n   * @param selected\n   *          Vector, the Images for the ZIP-File\n   */\n  public void createZip(File zipFileName, Vector<File> selected) throws IllegalArgumentException\n  {\n      //Check Argument1:\n      if (zipFileName == null) throw new IllegalArgumentException();\n\n\n\n\n    try\n    {\n      byte[] buffer = new byte[ 4096];\n\n      // Create the new ZIP-Fiel and set the Options\n      ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096));\n      out.setLevel(Deflater.BEST_COMPRESSION);\n      out.setMethod(ZipOutputStream.DEFLATED);\n\n      // Loop about the Files and put it into the new ZIP-File\n      for (int i = 0; i < selected.size(); i++)\n      {\n        FileInputStream in = new FileInputStream(selected.get(i));\n\n        String file = selected.get(i).getPath();\n        if (file.indexOf(\"\\\\\") != -1) file = file.substring(file.lastIndexOf(Options.fs) + 1, file.length());\n\n        ZipEntry ze = new ZipEntry(file);\n        out.putNextEntry(ze);\n        int len;\n        while ((len = in.read(buffer)) > 0)\n          out.write(buffer, 0, len);\n        out.closeEntry();\n        in.close();\n\n        // Delete the temp image\n        selected.get(i).delete();\n      }\n      out.close();\n    }\n    catch (IllegalArgumentException iae)\n    {\n      iae.printStackTrace();\n    }\n    catch (FileNotFoundException fnfe)\n    {\n      fnfe.printStackTrace();\n    }\n    catch (IOException ioe)\n    {\n      ioe.printStackTrace();\n    }\n  }\n\n  /**\n   * @param zip\n   *          boolean, should the output zipped?\n   */\n  public void generate(boolean zip)\n  {\n    //check if folder empty\n    if (!zip)\n    {\n      File outputDir = new File(o.getOutput_dir());\n\n      if (outputDir.isDirectory() && outputDir.listFiles().length > 0)\n      {\n        int response = JOptionPane.showConfirmDialog(m.list, m.mes.getString(\"Generator.53\") + \" \" + o.getOutput_dir() + \" \" + m.mes.getString(\"Generator.54\"), m.mes.getString(\"Generator.52\"), JOptionPane.YES_NO_OPTION);\n        if (response != JOptionPane.YES_OPTION) { return; }\n      }\n    }\n\n    this.quality = o.getQuality();\n    try\n    {\n      zipIt = new Vector<File>();\n      zippen = false;\n      zipFile = null;\n\n      // if zip true, get the ZIP-File\n      if (zip)\n      {\n        zippen = true;\n        JFileChooser fo = new JFileChooser();\n        fo.setFileFilter(new FileFilter()\n        {\n          public boolean accept(File f)\n          {\n            return f.isDirectory() || f.getName().toLowerCase().endsWith(\".zip\");\n          }\n\n          public String getDescription()\n          {\n            return \"ZIP-Datei\";\n          }\n        });\n\n        fo.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fo.setCurrentDirectory(FileSystemView.getFileSystemView().getParentDirectory(new File(o.getOutput_dir())));\n        int returnVal = fo.showOpenDialog(null);\n        if (returnVal == JFileChooser.APPROVE_OPTION) zipFile = fo.getSelectedFile();\n      }\n\n      File[] dir = new File[ 0];\n      // generate only selected Images or the whole directory?\n      if (m.list.getSelectedValues().size() == 0) dir = m.list.getPictures();\n      else if (m.list.getSelectedValues().size() > 0 && m.list.getSelectedValues().size() < m.list.getPictures().length)\n      {\n        int response = JOptionPane.showConfirmDialog(m.list, m.mes.getString(\"Generator.23\"), m.mes.getString(\"Generator.24\"), JOptionPane.YES_NO_CANCEL_OPTION);\n        switch (response)\n        {\n        case JOptionPane.YES_OPTION:\n          Vector<File> vf = m.list.getSelectedValues();\n          dir = new File[ vf.size()];\n          for (int i = 0; i < dir.length; i++)\n            dir[i] = vf.get(i);\n          ;\n          break; // generate only the selected images\n        case JOptionPane.NO_OPTION:\n          dir = m.list.getPictures();\n          break; // generate the whole directory\n        case JOptionPane.CANCEL_OPTION:\n          return; // do nothing\n        case JOptionPane.CLOSED_OPTION:\n          return; // do nothing\n        }\n      }\n      else\n      {\n        Vector<File> vf = m.list.getSelectedValues();\n        dir = new File[ vf.size()];\n        for (int i = 0; i < dir.length; i++)\n        {\n          dir[i] = vf.get(i);\n        }\n      }\n\n      final File files[] = dir;\n      Thread t = new Thread()\n      {\n        public void run()\n        {\n          String p_titel = files.length + m.mes.getString(\"Generator.28\") + files[0].getParent() + m.mes.getString(\"Generator.29\") + (Options.getInstance().getQuality() * 100) + m.mes.getString(\"Generator.30\");\n          m.p_monitor = new ProgressMonitor(m, p_titel, m.mes.getString(\"Generator.10\"), 0, files.length);\n          m.p_monitor.setMillisToPopup(0);\n          m.p_monitor.setMillisToDecideToPopup(0);\n          m.status.setStatusOn();\n          Element[] elements = new Element[ files.length];\n          for (int i = 0; i < files.length; i++)\n            elements[i] = new Element(i, files[i], Options.getInstance().getHmax(), Options.getInstance().getVmax(), new File(Options.getInstance().getOutput_dir()));\n\n          Producer producer = new Producer(m, elements, m.mes.getString(\"Generator.22\"));\n          Thread producerThread = new Thread(producer);\n          int cpus = Runtime.getRuntime().availableProcessors();\n          Thread consumerThreads[] = new Thread[ cpus];\n          for (int i = 0; i < cpus; i++)\n          {\n            consumerThreads[i] = new Thread(new Consumer(producer, m, zippen, zipIt));\n          }\n\n          producerThread.start();\n          for (int i = 0; i < cpus; i++)\n          {\n            consumerThreads[i].start();\n          }\n\n          try\n          {\n            producerThread.join();\n            for (int i = 0; i < cpus; i++)\n            {\n              consumerThreads[i].join();\n            }\n          }\n          catch (InterruptedException ignore)\n          {\n          }\n\n          try\n          {\n            m.jOutputDoc.insertString(m.jOutputDoc.getLength(), Options.ls + m.mes.getString(\"Generator.44\") + o.getOutput_dir() + m.mes.getString(\"Generator.45\") + Options.ls, m.readyAtr);\n            m.text.setCaretPosition(m.jOutputDoc.getLength());\n          }\n          catch (Exception e)\n          {\n            System.out.println(Options.ls + m.mes.getString(\"Generator.46\") + Options.ls);\n          }\n\n          // if zip, then zip\n          if (zippen && zipFile != null)\n          {\n            m.p_monitor.setNote(\"Erstelle Zipdatei\");\n            createZip(zipFile, zipIt);\n          }\n          m.status.setStatusOff();\n          m.p_monitor.close();\n        }\n      };\n      t.start();\n\n    }\n    catch (Exception ex)\n    {\n      System.out.println(ex);\n    }\n  }\n\n  /**\n   * <p>\n   * scale the Image and write it to a specified Directory or File\n   * </p>\n   * \n   * @param imageFile\n   *          String, filename for the outputimage\n//   * @param image\n//   *          Image, the input image\n   * @param iout\n   *          File, the directory or file for the scaled image\n   * @param print\n   *          boolean, Logs for GUI\n   * @param width\n   *          int, width of the scaled image\n   * @param height\n   *          int, heigth of the scaled image\n   * @return File\n   * @throws IOException\n//   * @throws ImageFormatException\n   */\n  public File generateImage(File imageFile, File iout, boolean print, int width, int height, String praefix) throws IOException//, ImageFormatException\n  {\n\n    // Output Image\n    File fo = new File(iout, praefix + imageFile.getName());\n\n    ImageInputStream iis = ImageIO.createImageInputStream(imageFile);\n    Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);\n    ImageReader reader = readers.next();\n    reader.setInput(iis, true);\n    BufferedImage image = reader.read(0, null);\n\n    IIOMetadata imageMetadata = reader.getImageMetadata(0);\n\n    try\n    {\n      // get width and height of the origianl image\n      int w = image.getWidth(null);\n      int h = image.getHeight(null);\n\n      // if image in landscape format?\n      if ((w >= h || height == 0) && width > 0)\n      {\n        double tmp = (double) w / width;\n        double h1 = h;\n        height = (int) (h1 / tmp);\n      }\n      else\n      {\n        double tmp = (double) h / height;\n        double w1 = w;\n        width = (int) (w1 / tmp);\n      }\n\n      // Create new Image\n      BufferedImage bimage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n      // get graphics of the new Image\n      Graphics2D g = bimage.createGraphics();\n\n      // set quality of the new Image\n      g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n\n      switch (Options.getInstance().getModus())\n      {\n      case Options.MODUS_QUALITY:\n        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n        break;\n\n      case Options.MODUS_DEFAULT:\n        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_DEFAULT);\n        g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_DEFAULT);\n        break;\n\n      case Options.MODUS_SPEED:\n        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);\n        g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_SPEED);\n        break;\n\n      default:\n        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_DEFAULT);\n        g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_DEFAULT);\n        break;\n      }\n\n      if (Options.getInstance().isAntialiasing())\n      {\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n      }\n      else\n      {\n        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n      }\n      g.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);\n\n      // set white Background of the new Image\n      g.setColor(Color.WHITE);\n      g.fillRect(0, 0, width, height);\n\n      // create a scaled instance of the new Image\n      Image scale;\n\n      if (width < 300 || height < 300) scale = image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING);\n      else scale = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n      g.drawImage(scale, 0, 0, null);\n\n      int font_size = (int) (width * 0.02);\n\n      if (o.isCopyright())\n      {\n        g.setColor(new Color(o.getCopyright_r(), o.getCopyright_g(), o.getCopyright_b()));\n        Font font1 = new Font(\"Helvetica\", Font.BOLD, font_size);\n        g.setFont(font1);\n        g.drawString(o.getCopyrightText(), font_size, height - (2 * font_size));\n      }\n\n      // Print process info for the GUI\n      if (print) try\n      {\n        m.jOutputDoc.insertString(m.jOutputDoc.getLength(), m.mes.getString(\"Generator.20\"), m.outputAtr);\n        m.text.setCaretPosition(m.jOutputDoc.getLength());\n\n      }\n      catch (Exception e)\n      {\n        System.out.print(\". . \");\n      }\n\n      // create new File for the new Image\n      ImageWriter writer = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      ImageOutputStream ios;\n\n      if (iout.isDirectory())\n      {\n        ios = new MemoryCacheImageOutputStream(new FileOutputStream(fo));\n      }\n      else\n      {\n        ios = new MemoryCacheImageOutputStream(new FileOutputStream(iout));\n      }\n      writer.setOutput(ios);\n\n      JPEGImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());\n      iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n\n      // set JPEG Quality\n      iwparam.setCompressionQuality(o.getQuality());\n      iwparam.setOptimizeHuffmanTables(true);\n\n      // copy the metadata\n      if (o.isCopyMetadata())\n      {\n        writer.write(null, new IIOImage(bimage, null, imageMetadata), iwparam);\n      }\n      else\n      {\n        writer.write(null, new IIOImage(bimage, null, null), iwparam);\n      }\n\n      bimage.getGraphics().dispose();\n      writer.dispose();\n\n    }\n    catch (Exception l)\n    {\n      m.error = true;\n    }\n\n    return fo;\n  }\n\n  /**\n   * <p>\n   * rotate the Image and write it to the File\n   * </p>\n   * \n   * @param file\n   *          File\n   */\n  public void rotate(File file)\n  {\n    BufferedImage i = null;\n    IIOMetadata imeta = null;\n\n    try\n    {\n      ImageInputStream iis = ImageIO.createImageInputStream(file);\n      ImageReader reader = ImageIO.getImageReadersByFormatName(\"jpg\").next();\n      reader.setInput(iis, true);\n      ImageReadParam params = reader.getDefaultReadParam();\n      i = reader.read(0, params);\n      imeta = reader.getImageMetadata(0);\n    }\n    catch (IOException e)\n    {\n      System.err.println(\"Error while reading File: \" + file.getAbsolutePath());\n      e.printStackTrace();\n      return;\n    }\n\n    try\n    {\n      // get width and height of the original image\n      int w = i.getWidth(null);\n      int h = i.getHeight(null);\n      System.out.println(\"Width: \" + w + \" Height :\" + h);\n\n      System.out.println(\"Drehe Bild:\" + file.getAbsolutePath());\n      AffineTransform rotation = new AffineTransform();\n      AffineTransformOp rotator;\n      rotation.translate(h, 0);\n      rotation.rotate(90.0 * Math.PI / 180.0);\n\n      rotator = new AffineTransformOp(rotation, AffineTransformOp.TYPE_BICUBIC);\n      i = rotator.filter(i, null);\n      w = i.getWidth(null);\n      h = i.getHeight(null);\n      System.out.println(\"Width: \" + w + \" Height :\" + h);\n\n      System.out.println(\"Speichere Bild:\" + file.getAbsolutePath());\n      ImageWriter writer = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n\n      writer.setOutput(new MemoryCacheImageOutputStream(new FileOutputStream(file)));\n      ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());\n      iwparam.setCompressionMode(ImageWriteParam.MODE_COPY_FROM_METADATA);\n      IIOMetadata meta_convert = writer.convertImageMetadata(imeta, new ImageTypeSpecifier(i), iwparam);\n      IIOMetadataController imc = meta_convert.getController();\n      imc.activate(meta_convert);\n\n      writer.write(meta_convert, new IIOImage(i, null, imeta), iwparam);\n      writer.dispose();\n      System.out.println(\"Bild gespeichert!\");\n    }\n    catch (Exception l)\n    {\n      m.error = true;\n    }\n  }\n\n  /**\n   * <p>\n   * Resize a single image\n   * </p>\n   * \n   * @param file\n   *          File, input Image File\n   * @param image\n   *          BufferedImage, input Image\n   */\n  public void generateSingle(File file, BufferedImage image)\n  {\n\n    // where shuld the image saved?\n    JOptionPane.showMessageDialog(null, m.mes.getString(\"Generator.15\"));\n\n    // select the output image\n    JFileChooser fo = new JFileChooser();\n    fo.setFileFilter(new FileFilter()\n    {\n      public boolean accept(File f)\n      {\n        return f.isDirectory() || f.getName().toLowerCase().endsWith(\".jpg\") || f.getName().toLowerCase().endsWith(\".jpeg\");\n      }\n\n      public String getDescription()\n      {\n        return \"JPEG-Datei\";\n      }\n    });\n\n    fo.setFileSelectionMode(JFileChooser.FILES_ONLY);\n    fo.setCurrentDirectory(FileSystemView.getFileSystemView().getParentDirectory(file));\n    int returnVal = fo.showOpenDialog(null);\n    if (returnVal == JFileChooser.APPROVE_OPTION)\n    {\n      m.status.setStatusOn();\n      try\n      {\n        // resize the image\n        generateImage(file, fo.getSelectedFile(), false, o.getHmax(), o.getVmax(), \"\");\n      }\n      catch (Exception e)\n      {\n        e.printStackTrace();\n      }\n      m.status.setStatusOff();\n\n      // show success message\n      JOptionPane.showMessageDialog(null, m.mes.getString(\"Generator.19\"));\n    }\n  }\n\n  /**\n   * <p>\n   * Resize the Images without the GUI, when the Programm is started with\n   * Arguments\n   * </p>\n   * \n   * @param input\n   *          File, the Input Directory\n   * @param output\n   *          File, the Output Directory\n   * @param width\n   *          int, width of the scaled image\n   * @param height\n   *          int, heigth of the scaled image\n   */\n  public void generateText(File input, File output, int width, int height)\n  {\n\n    // check if mass resize or single picture resize\n    if (input.isDirectory() && output.isDirectory()) try\n    {\n\n      // get all JPEGs of the directory\n      File[] dir = input.listFiles();\n      Vector<File> v = new Vector<File>();\n      for (int i = 0; i < dir.length; i++)\n        // text.setText(text.getText() + dir[i].toString() + \"\\n\");\n        try\n        {\n          String end = dir[i].toString().substring(dir[i].toString().lastIndexOf(\".\") + 1, dir[i].toString().length());\n          if (dir[i].isFile() && (end.equalsIgnoreCase(\"jpg\") || end.equalsIgnoreCase(\"jpeg\"))) v.addElement(dir[i]);\n        }\n        catch (Exception st)\n        {\n        }\n\n      // print info message\n      System.out.println(v.size() + m.mes.getString(\"Generator.28\") + input.toString() + m.mes.getString(\"Generator.29\") + quality + m.mes.getString(\"Generator.30\") + Options.ls + Options.ls);\n\n      // resize the images\n      for (int i = 0; i < v.size(); i++)\n      {\n        System.out.print(m.mes.getString(\"Generator.10\") + v.elementAt(i).getName() + \"\\t . . . \");\n        generateImage(v.elementAt(i), output, true, o.getHmax(), o.getVmax(), m.mes.getString(\"Generator.22\"));\n        System.out.println(m.mes.getString(\"Generator.12\"));\n      }\n      System.out.println(Options.ls + v.size() + m.mes.getString(\"Generator.46\") + Options.ls);\n    }\n    catch (Exception ex)\n    {\n      System.out.println(ex);\n    }\n    else if (input.isFile())\n    {\n      try\n      {\n        // resize single image\n        generateImage(input, output, true, o.getHmax(), o.getVmax(), m.mes.getString(\"Generator.22\"));\n      }\n      catch (Exception e)\n      {\n        e.printStackTrace();\n      }\n    }\n  }\n\n  /**\n   * <p>\n   * <b>Not used because loose of Metadata and Quality</b> rotate the Image and\n   * write it to the File\n   * </p>\n   * \n   * @param file\n   *          File\n   */\n  public void rotate(File file, int angel)\n  {\n    BufferedImage i = null;\n    IIOMetadata imeta = null;\n\n    try\n    {\n      ImageInputStream iis = ImageIO.createImageInputStream(file);\n      ImageReader reader = ImageIO.getImageReadersByFormatName(\"jpg\").next();\n      reader.setInput(iis, true);\n      ImageReadParam params = reader.getDefaultReadParam();\n      i = reader.read(0, params);\n      imeta = reader.getImageMetadata(0);\n    }\n    catch (IOException e)\n    {\n      System.err.println(\"Error while reading File: \" + file.getAbsolutePath());\n      e.printStackTrace();\n      return;\n    }\n\n    try\n    {\n      // get width and height of the origianl image\n      int w = i.getWidth(null);\n      int h = i.getHeight(null);\n      rotateImage(i, 90);\n      System.out.println(\"Width: \" + w + \" Height :\" + h);\n\n      System.out.println(\"Drehe Bild:\" + file.getAbsolutePath());\n      i = rotateImage(i, angel);\n\n      FileOutputStream fos = new FileOutputStream(file);\n\n      ImageWriter writer = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      ImageOutputStream ios = ImageIO.createImageOutputStream(fos);\n      writer.setOutput(ios);\n      ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());\n      iwparam.setCompressionMode(ImageWriteParam.MODE_COPY_FROM_METADATA);\n\n      // set JPEG Quality\n      iwparam.setCompressionQuality(0.92f);\n      writer.write(imeta, new IIOImage(i, null, null), iwparam);\n      ios.flush();\n      writer.dispose();\n      ios.close();\n      fos.close();\n\n      System.out.println(\"Bild gespeichert!\");\n    }\n    catch (Exception l)\n    {\n      m.error = true;\n    }\n  }\n\n  public BufferedImage rotateImage(BufferedImage image, double rotate)\n  {\n    if (rotate == 0) return image;\n\n    AffineTransform transform = new AffineTransform();\n\n    // get width and height of the origianl image\n    int width = image.getWidth(null);\n    int height = image.getHeight(null);\n\n    if (rotate == Generator.ROTATE_90)\n    {\n      transform.translate(height, 0);\n      transform.rotate(Generator.ROTATE_90);\n      width = image.getHeight(); // swap\n      height = image.getWidth();\n    }\n    else if (rotate == Generator.ROTATE_270)\n    {\n      transform.translate(0, width);\n      transform.rotate(Generator.ROTATE_270);\n      width = image.getHeight(null); // swap\n      height = image.getWidth(null);\n    }\n    else\n    {\n      throw new IllegalArgumentException(\"degree must be a mutiple of 90�!\");\n    }\n\n    // Return a new Image\n    BufferedImage returnImage = new BufferedImage(width, height, image.getColorModel().getColorSpace().getType());\n    Graphics2D g = returnImage.createGraphics();\n    g.drawImage(image, transform, null);\n\n    return returnImage;\n  }\n}\n
===================================================================
--- src/main/java/org/jis/generator/Generator.java	(date 1398353867000)
+++ src/main/java/org/jis/generator/Generator.java	(revision )
@@ -100,7 +100,11 @@
       //Check Argument1:
       if (zipFileName == null) throw new IllegalArgumentException();
 
-
+      //Check Argument2:
+      if (selected == null){
+          this.createZip(zipFileName, new Vector<File>());
+          return;
+      }
 
 
     try
